// Generated by CoffeeScript 1.4.0
(function() {
  var Promise, async;

  async = require('async');

  Promise = (function() {

    Promise.make = function() {
      return new Promise();
    };

    function Promise() {
      this.calls = [];
      this.error = console.error;
      this;

    }

    Promise.prototype.then = function(proc) {
      this.calls.push(proc);
      return this;
    };

    Promise.prototype["catch"] = function(error) {
      this.error = error;
      return this;
    };

    Promise.prototype.done = function(lastCB) {
      var helper, interim, self;
      if (lastCB == null) {
        lastCB = function() {};
      }
      self = this;
      interim = null;
      helper = function(call, next) {
        var cb;
        cb = function(err, res) {
          if (err) {
            return next(err);
          } else {
            interim = res;
            return next(null);
          }
        };
        if (interim !== null && interim !== void 0) {
          return call(interim, cb);
        } else {
          return call(cb);
        }
      };
      async.eachSeries(this.calls, helper, function(err) {
        if (err) {
          return self.error(err);
        } else {
          return lastCB();
        }
      });
      return this;
    };

    return Promise;

  })();

  module.exports = Promise;

}).call(this);
