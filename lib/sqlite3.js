// Generated by CoffeeScript 1.4.0
(function() {
  var DBI, Driver, Sqlite3Driver, sqlite3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  sqlite3 = require('sqlite3').verbose();

  DBI = require('./dbi');

  Driver = require('./driver');

  Sqlite3Driver = (function(_super) {

    __extends(Sqlite3Driver, _super);

    function Sqlite3Driver(params) {
      this.params = params;
      this.disconnect = __bind(this.disconnect, this);

      this.exec = __bind(this.exec, this);

      this.query = __bind(this.query, this);

      this.connect = __bind(this.connect, this);

    }

    Sqlite3Driver.prototype.connect = function(cb) {
      var self;
      self = this;
      return this.inner = new sqlite3.Database(this.params, function(err) {
        if (err) {
          return cb(err);
        } else {
          return cb(null, self);
        }
      });
    };

    Sqlite3Driver.prototype.query = function(key, args, cb) {
      return this.inner.all(key, args, cb);
    };

    Sqlite3Driver.prototype.exec = function(key, args, cb) {
      return this.inner.run(key, args, function(err, res) {
        return cb(err, res);
      });
    };

    Sqlite3Driver.prototype.disconnect = function(cb) {
      return this.inner.close(cb);
    };

    return Sqlite3Driver;

  })(Driver);

  DBI.register('sqlite', Sqlite3Driver);

  module.exports = Sqlite3Driver;

}).call(this);
