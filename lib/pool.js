// Generated by CoffeeScript 1.8.0
(function() {
  var Driver, EventEmitter, NoPool, Pool, loglet, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Driver = require('./driver');

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  loglet = require('loglet');

  NoPool = (function() {
    function NoPool(key, driver, connOptions, options) {
      var noPoolDriver, self;
      this.key = key;
      this.connOptions = connOptions;
      this.options = options;
      self = this;
      this.driver = noPoolDriver = (function(_super) {
        __extends(noPoolDriver, _super);

        function noPoolDriver() {
          return noPoolDriver.__super__.constructor.apply(this, arguments);
        }

        noPoolDriver.id = 0;

        return noPoolDriver;

      })(driver);
    }

    NoPool.prototype.connect = function(cb) {
      var conn;
      conn = new this.driver(this.connOptions);
      return conn.connect(cb);
    };

    NoPool.prototype.prepare = function(call, options) {
      var proc;
      proc = (function() {
        if (options != null ? options.query : void 0) {
          return function(args, cb) {
            return this.query(options.query, args, cb);
          };
        } else if (options != null ? options.exec : void 0) {
          return function(args, cb) {
            return this.exec(options.exec, args, cb);
          };
        } else if (options instanceof Function) {
          return options;
        } else {
          throw {
            error: 'invalid_prepare_option',
            call: call,
            options: options
          };
        }
      })();
      return this.driver.prototype[call] = proc;
    };

    return NoPool;

  })();

  Pool = (function(_super) {
    __extends(Pool, _super);

    Pool.NoPool = NoPool;

    Pool.defaultOptions = {
      min: 0,
      max: 20
    };

    function Pool(key, driver, connOptions, options) {
      var poolDriver, self;
      this.key = key;
      this.connOptions = connOptions;
      this.options = options;
      this.options = _.extend({}, this.constructor.defaultOptions, this.options || {});
      self = this;
      this.driver = poolDriver = (function(_super1) {
        __extends(poolDriver, _super1);

        function poolDriver() {
          return poolDriver.__super__.constructor.apply(this, arguments);
        }

        poolDriver.id = 0;

        poolDriver.prototype.disconnect = function(cb) {
          return self.makeAvailable(this);
        };

        return poolDriver;

      })(driver);
      this.total = [];
      this.avail = [];
    }

    Pool.prototype.connect = function(cb) {
      var connectMe, db;
      loglet.debug('Pool.connect', this.options, this.total.length, this.avail.length);
      connectMe = function(db) {
        if (db.isConnected()) {
          return cb(null, db);
        } else {
          return db.connect(cb);
        }
      };
      if (this.avail.length > 0) {
        db = this.avail.shift();
        return connectMe(db);
      } else {
        this.once('available', connectMe);
        if (this.total.length < this.options.max) {
          db = new this.driver(this.connOptions);
          this.total.push(db);
          return this.makeAvailable(db);
        }
      }
    };

    Pool.prototype.prepare = function(call, options) {
      var proc;
      proc = (function() {
        if (options != null ? options.query : void 0) {
          return function(args, cb) {
            return this.query(options.query, args, cb);
          };
        } else if (options != null ? options.exec : void 0) {
          return function(args, cb) {
            return this.exec(options.exec, args, cb);
          };
        } else if (options instanceof Function) {
          return options;
        } else {
          throw {
            error: 'invalid_prepare_option',
            call: call,
            options: options
          };
        }
      })();
      return this.driver.prototype[call] = proc;
    };

    Pool.prototype.makeAvailable = function(db) {
      if (!_.contains(this.avail, db)) {
        this.avail.push(db);
      }
      return this.emit('available', db);
    };

    return Pool;

  })(EventEmitter);

  module.exports = Pool;

}).call(this);
