// Generated by CoffeeScript 1.4.0
(function() {
  var Driver, EventEmitter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Driver = (function(_super) {

    __extends(Driver, _super);

    Driver.id = 0;

    Driver.pool = true;

    function Driver(options) {
      this.options = options;
      this.constructor.id++;
      this.id = this.constructor.id;
    }

    Driver.prototype.connect = function(cb) {};

    Driver.prototype.isConnected = function() {
      return false;
    };

    Driver.prototype.driverName = function() {
      return this.constructor.name;
    };

    Driver.prototype.query = function(key, args, cb) {};

    Driver.prototype.queryOne = function(key, args, cb) {
      return this.query(key, args, function(err, rows) {
        if (err) {
          cb(err);
        }
        if ((rows != null ? rows.length : void 0) === 0) {
          return cb({
            error: 'no_rows_found'
          });
        } else {
          return cb(null, rows[0]);
        }
      });
    };

    Driver.prototype.exec = function(key, args, cb) {
      return this.query(key, args, function(err, rows) {
        if (err) {
          return cb(err);
        } else {
          return cb(null);
        }
      });
    };

    Driver.prototype.begin = function(cb) {};

    Driver.prototype.commit = function(cb) {};

    Driver.prototype.rollback = function(cb) {};

    Driver.prototype.disconnect = function(cb) {};

    Driver.prototype.close = function(cb) {};

    return Driver;

  })(EventEmitter);

  module.exports = Driver;

}).call(this);
