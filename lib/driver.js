// Generated by CoffeeScript 1.8.0
(function() {
  var Driver, EventEmitter, Promise, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs.extra'));

  Driver = (function(_super) {
    __extends(Driver, _super);

    Driver.id = 0;

    Driver.pool = true;

    function Driver(key, options) {
      this.key = key;
      this.options = options;
      this.constructor.id++;
      this.id = this.constructor.id;
    }

    Driver.prototype.connect = function(cb) {};

    Driver.prototype.isConnected = function() {
      return false;
    };

    Driver.prototype.driverName = function() {
      return this.constructor.name;
    };

    Driver.prototype.query = function(key, args, cb) {};

    Driver.prototype.queryOne = function(key, args, cb) {
      if (arguments.length === 2) {
        cb = args;
        args = {};
      }
      return this.query(key, args, function(err, rows) {
        if (err) {
          cb(err);
        }
        if ((rows != null ? rows.length : void 0) === 0) {
          return cb({
            error: 'no_rows_found'
          });
        } else if ((rows != null ? rows.length : void 0) > 0) {
          return cb(null, rows[0]);
        } else {
          return cb({
            error: 'unknown_result',
            result: rows
          });
        }
      });
    };

    Driver.prototype.exec = function(key, args, cb) {
      if (arguments.length === 2) {
        cb = args;
        args = {};
      }
      return this.query(key, args, function(err, rows) {
        if (err) {
          return cb(err);
        } else {
          return cb(null);
        }
      });
    };

    Driver.prototype.begin = function(cb) {
      return this.exec('begin', cb);
    };

    Driver.prototype.commit = function(cb) {
      return this.exec('commit', cb);
    };

    Driver.prototype.rollback = function(cb) {
      return this.exec('rollback', cb);
    };

    Driver.prototype.disconnect = function(cb) {};

    Driver.prototype.close = function(cb) {};

    Driver.prototype.execScript = function(filePath, cb) {
      var self;
      self = this;
      return fs.readFileAsync(filePath, 'utf8').then(function(data) {
        var queries;
        queries = data.split(/\w*;\w/);
        return Promise.each(queries, function(query) {
          console.log('try', query);
          return self.execAsync(query, {});
        });
      }).then(function() {
        return cb(null);
      })["catch"](cb);
    };

    return Driver;

  })(EventEmitter);

  module.exports = Driver;

}).call(this);
